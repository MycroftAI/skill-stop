# Copyright 2016 Mycroft AI Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import time
from mycroft.audio import wait_while_speaking
from adapt.intent import IntentBuilder
from mycroft.messagebus.message import Message
from mycroft.skills.core import MycroftSkill, intent_handler, intent_file_handler
from mycroft.enclosure.api import EnclosureAPI


class StopSkill(MycroftSkill):
    def __init__(self):
        super().__init__(name="StopSkill")

    @intent_handler(IntentBuilder("").require("Stop"))
    def handle_stop(self, event):
        # Framework catches this, invokes stop() method on all skills
        self.bus.emit(Message("mycroft.stop"))

    ######################################################################
    # Typically the enclosure will handle all of the following
    # NOTE: system.update is generated by skill-version-checker
    ######################################################################

    @intent_file_handler("reboot.intent")
    def handle_reboot(self, event):
        if self.ask_yesno("confirm.reboot") == "yes":
            self.bus.emit(Message("system.reboot"))

    @intent_file_handler("shutdown.intent")
    def handle_shutdown(self, event):
        if self.ask_yesno("confirm.shutdown") == "yes":
            self.enclosure.eyes_color(70, 65, 69)  # soft gray
            self.speak_dialog('shutting.down')
            wait_while_speaking()
            for percentage in range(100, -1, -10):
                self.enclosure.eyes_fill(percentage)
                time.sleep(1)
            self.enclosure.eyes_brightness(0)
            self.bus.emit(Message("system.shutdown"))

    @intent_file_handler('wifi.setup.intent')
    def handle_wifi_setup(self, event):
        self.bus.emit(Message("system.wifi.setup"))

    @intent_file_handler('ssh.enable.intent')
    def handle_ssh_enable(self, event):
        self.bus.emit(Message("system.ssh.enable"))

    @intent_file_handler('ssh.disable.intent')
    def handle_ssh_disable(self, event):
        self.bus.emit(Message("system.ssh.disable"))

def create_skill():
    return StopSkill()
